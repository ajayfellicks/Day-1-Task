Difference between HTTP1.1 vs HTTP2

HTTP1.1

Host header: HTTP 1.0 does not officially require the host header. HTTP 1.1 requires it by the specification.
The host header is specially important to route messages through proxy servers,
allowing to distinguish domains that point to the same IP

Persistent connections: in HTTP 1.0, each request/response pair 
requires opening a new connection. In HTTP 1.1, it is possible to 
execute several requests using a single connection

Continue status: to avoid servers refusing unprocessable requests,  
now clients can first send only the request headers and check if they 
receive a continue status code (100) 

New methods: besides the already available methods of HTTP 1.0, the 1.1 version added 
six extra methods: PUT, PATCH, DELETE, CONNECT, TRACE, and OPTIONS

HTTP2

Request multiplexing: HTTP 1.1 is a sequential protocol. So, 
we can send a single request at a time. HTTP 2.0, in turn, allows to send requests and receive responses asynchronously.
 In this way, we can do multiple requests at the same time using a single connection

Request prioritization: with HTTP 2.0, we can set a numeric prioritization in a batch of requests. 
Thus, we can be explicit in which order we expect the responses, such as getting a webpage CSS before its JS files

Automatic compressing: in the previous version of HTTP (1.1), we must explicitly require the compression of requests and responses. 
HTTP 2.0, however, executes a GZip compression automatically

Connection reset: a functionality that allows closing a connection between a server and a client for some reason, 
thus immediately opening a new one

Server push: to avoid a server receiving lots of requests, HTTP 2.0 introduced a server push functionality. 
With that, the server tries to predict the resources that will be requested soon.
So, the server proactively pushes these resources to the client cache